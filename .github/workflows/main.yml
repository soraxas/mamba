name: CI

on:
  push:
    branches:
    - test-gh-action
  pull_request:
    branches:
    - test-gh-action

jobs:

  umamba_tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
        #      - name: free disk space
        #        if: matrix.os == 'ubuntu-latest'
        #        run: |
        #          sudo swapoff -a
        #          sudo rm -f /swapfile
        #          sudo apt clean
        #          docker rmi $(docker image ls -aq)
        #          df -h
      - name: Cache CCACHE paths
        uses: actions/cache@v2
        with:
          path: |
            ~/ccache
          key: ${{ runner.os }}-ccache-umamba
      - name: install micromamba
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            wget -qO- https://api.anaconda.org/download/conda-forge/micromamba/0.4.0/linux-64/micromamba-0.4.0-hc2cb875_0.tar.bz2 | tar -xvj bin/micromamba --strip-components=1
          else
            wget -qO- https://anaconda.org/conda-forge/micromamba/0.4.0/download/osx-64/micromamba-0.4.0-h8680c10_1.tar.bz2 | tar -xvj bin/micromamba
            mv bin/micromamba ./micromamba
          fi
          ./micromamba shell init -s bash -p ~/mambaroot
      - name: install deps
        shell: bash -l {0}
        run: |
          export MAMBA_ROOT_PREFIX=~/mambaroot
          export MAMBA_EXE=$(pwd)/micromamba
          . $MAMBA_ROOT_PREFIX/etc/profile.d/mamba.sh
          micromamba create -y -p ~/build_env pybind11 libsolv libsodium libarchive "libcurl=7.76.1=*_0" nlohmann_json cxx-compiler ccache cmake gtest gmock cpp-filesystem reproc-cpp yaml-cpp pyyaml cli11 -c conda-forge
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
      - name: build micromamba
        shell: bash -l {0}
        run: |
          export MAMBA_ROOT_PREFIX=~/mambaroot
          export MAMBA_EXE=$(pwd)/micromamba
          . $MAMBA_ROOT_PREFIX/etc/profile.d/mamba.sh
          micromamba activate ~/build_env
          export CCACHE_DIR=$HOME/ccache
          mkdir -p ~/.conda
          touch ~/.conda/environments.txt
          mkdir build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
                  -DENABLE_TESTS=OFF \
                  -DBUILD_EXE=ON \
                  -DBUILD_BINDINGS=OFF \
                  -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
                  -DCMAKE_C_COMPILER_LAUNCHER=ccache
          make -j2
      - name: run new micromamba
        shell: bash -l {0}
        run: |
          export MAMBA_ROOT_PREFIX=~/mambaroot
          export MAMBA_EXE=$(pwd)/micromamba
          cd build
          ./micromamba --version
          if [ "$RUNNER_OS" == "Linux" ]; then
            ./micromamba create -p ~/explicit_env -f ../test/explicit_env_linux.txt
          else
            ./micromamba create -p ~/explicit_env -f ../test/explicit_env_osx.txt
          fi;
      - name: run new micromamba yaml env
        shell: bash -l {0}
        run: |
          export MAMBA_ROOT_PREFIX=~/mambaroot
          export MAMBA_EXE=$(pwd)/micromamba
          cd build
          ./micromamba create -f ../test/yaml_env.yml
      - name: run new micromamba spec files
        shell: bash -l {0}
        run: |
          export MAMBA_ROOT_PREFIX=~/mambaroot
          export MAMBA_EXE=$(pwd)/micromamba
          cd build
          ./micromamba create -f ../test/spec_file_1.txt -n testenv_one_file -c conda-forge
          ./micromamba create -f ../test/spec_file_1.txt -f ../test/spec_file_2.txt -n testenv_two_files -c conda-forge
          # test noarch packages
          $MAMBA_ROOT_PREFIX/envs/testenv_two_files/bin/wheel --help
      - name: micromamba prefix replacement / pkgconfig check
        shell: bash -l -eo pipefail {0}
        run: |
          cd build
          export MAMBA_ROOT_PREFIX=~/mambaroot
          export MAMBA_EXE=$(pwd)/micromamba
          eval "$($MAMBA_EXE shell hook -s posix -p ~/mambaroot)"

          micromamba create -n pkgconf pkg-config=0.29.2 eigen -c conda-forge
          micromamba activate pkgconf
          IDIR=$(pkg-config eigen3 --cflags-only-I)
          if [[ "${IDIR}" != "-I$CONDA_PREFIX/include/eigen3" ]];
          then
            exit 1;
          fi
      - name: install zsh, xonsh and fish
        if: matrix.os == 'ubuntu-latest'
        shell: bash -l -eo pipefail {0}
        run: |
          sudo apt-get install zsh xonsh fish -y
      - name: install fish
        if: matrix.os == 'macos-latest'
        shell: bash -l -eo pipefail {0}
        run: |
          brew install fish
      - name: micromamba python based tests
        shell: bash -l -eo pipefail {0}
        run: |
          export MAMBA_ROOT_PREFIX=~/mambaroot
          export MAMBA_EXE=$(pwd)/build/micromamba
          eval "$($MAMBA_EXE shell hook -s posix -p ~/mambaroot)"

          micromamba activate
          micromamba install python=3.8 pytest pyyaml -c conda-forge

          export TEST_MAMBA_EXE=$(pwd)/build/micromamba
          pytest test/micromamba
